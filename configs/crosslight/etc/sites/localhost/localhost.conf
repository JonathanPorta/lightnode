## 
# Use this file to define the url matches for the localhost domain.
# You will need to create a folder in ROOT/var/log/DOMAIN for the domain
# Specific logging to work.
#
# Matching the following and proxy/serve accordingly.
# /static
# /couch
# /jefri
# /scheduler
# /reports
# /stream
# /

# Static content is served with this instance of lighttpd
$HTTP["url"] =~ "^/static(.*)" {

	# Variable to make paths easier.
	route = "static"

	# Hard link the docroot here:
	server.document-root = rootdir + "/var/www"

	# Distinct log folder/file for each "special" route.
	accesslog.filename = rootdir + "/var/log/" + domain + "/" + route + ".log"
	server.errorlog = rootdir + "/var/log/" + domain + "/" + route + ".error.log"

	# Special things we do because we are serving static content.
	setenv.add-response-header = ("Cache-Control" => "public")
	expire.url = ( "" => "access plus 1 years" )
	server.max-keep-alive-requests = 0
}

# Route CouchDB requests to an http server listending on 127.0.0.1:8000
else $HTTP["url"] =~ "^/couch(.*)" {

	# Variable to make paths easier.
	route = "couch"

	# Distinct log folder/file for each "special" route.
	accesslog.filename = rootdir + "/var/log/" + domain + "/" + route + ".log"
	server.errorlog = rootdir + "/var/log/" + domain + "/" + route + ".error.log"

	# Define how this request will be proxied.
	proxy.server  = (
		"" => ( (
			"host" => "127.0.0.1",
			"port" => 5984
		) )
	)
}

# Route JEFRi requests to an http server listending on 127.0.0.1:3000
else $HTTP["url"] =~ "^/jefri(.*)" {

	# Variable to make paths easier.
	route = "jefri"

	# Distinct log folder/file for each "special" route.
	accesslog.filename = rootdir + "/var/log/" + domain + "/" + route + ".log"
	server.errorlog = rootdir + "/var/log/" + domain + "/" + route + ".error.log"

	# Define how this request will be proxied.
	proxy.server  = (
		"" => ( (
			"host" => "127.0.0.1",
			"port" => 3000
		) )
	)
}

# Route scheduler requests to an http server listending on 127.0.0.1:6000
else $HTTP["url"] =~ "^/scheduler(.*)" {

	# Variable to make paths easier.
	route = "scheduler"

	# Distinct log folder/file for each "special" route.
	accesslog.filename = rootdir + "/var/log/" + domain + "/" + route + ".log"
	server.errorlog = rootdir + "/var/log/" + domain + "/" + route + ".error.log"

	# Define how this request will be proxied.
		proxy.server  = (
			"" => ( (
				"host" => "127.0.0.1",
				"port" => 6000
		) )
	)
}

# Route report requests to an http server listending on 127.0.0.1:7000
else $HTTP["url"] =~ "^/reports(.*)" {

	# Variable to make paths easier.
	route = "reports"

	# Distinct log folder/file for each "special" route.
	accesslog.filename = rootdir + "/var/log/" + domain + "/" + route + ".log"
	server.errorlog = rootdir + "/var/log/" + domain + "/" + route + ".error.log"

	# Define how this request will be proxied.
	proxy.server  = (
		"" => ( (
			"host" => "127.0.0.1",
			"port" => 7000
		) )
	)
}

# Route streaming(socket.io) requests to an http server listending on 127.0.0.1:4000
else $HTTP["url"] =~ "^/stream(.*)" {

	# Variable to make paths easier.
	route = "stream"

	# Distinct log folder/file for each "special" route.
	accesslog.filename = rootdir + "/var/log/" + domain + "/" + route + ".log"
	server.errorlog = rootdir + "/var/log/" + domain + "/" + route + ".error.log"
	# Define how this request will be proxied.
	proxy.server  = (
		"" => ( (
			"host" => "127.0.0.1",
			"port" => 4000
		) )
	)
}

# Route all remaining requests to an http server listening on 127.0.0.1:1000
else $HTTP["url"] =~ "^(.*)" {

	# Distinct log folder/file for each "special" route.
	accesslog.filename = rootdir + "/var/log/" + domain + ".log"
	server.errorlog = rootdir + "/var/log/" + domain + ".error.log"

	# Define how this request will be proxied.
	proxy.server  = (
		"" => ( (
			"host" => "127.0.0.1",
			"port" => 10000
		) )
	)
}
